name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  FLUTTER_VERSION: '3.16.0'
  NODE_VERSION: '18'

jobs:
  # Backend Testing and Quality Checks
  backend-test:
    name: Backend Tests & Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio black flake8 mypy
        
    - name: Run linting with Black
      run: |
        black --check --diff backend/
        
    - name: Run linting with Flake8
      run: |
        flake8 backend/ --max-line-length=88 --extend-ignore=E203,W503
        
    - name: Run type checking with MyPy
      run: |
        mypy backend/ --ignore-missing-imports
        
    - name: Run tests with pytest
      run: |
        cd backend
        pytest --cov=. --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Mobile App Testing and Building
  mobile-test:
    name: Mobile App Tests & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Flutter ${{ env.FLUTTER_VERSION }}
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    - name: Cache Flutter dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.pub-cache
          mobile/.dart_tool
          mobile/build
        key: ${{ runner.os }}-flutter-${{ hashFiles('mobile/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-flutter-
          
    - name: Get Flutter dependencies
      run: |
        cd mobile
        flutter pub get
        
    - name: Analyze Flutter code
      run: |
        cd mobile
        flutter analyze
        
    - name: Run Flutter tests
      run: |
        cd mobile
        flutter test
        
    - name: Build Android APK
      run: |
        cd mobile
        flutter build apk --debug
        
    - name: Build iOS (simulator)
      run: |
        cd mobile
        flutter build ios --simulator --debug
        
    - name: Build Web
      run: |
        cd mobile
        flutter build web
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: mobile-builds
        path: |
          mobile/build/app/outputs/flutter-apk/app-debug.apk
          mobile/build/web/
        retention-days: 7

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Bandit security linter
      run: |
        pip install bandit
        bandit -r backend/ -f json -o bandit-report.json || true
        
    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: bandit-report.json
        retention-days: 30

  # Docker Build and Test
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [backend-test, mobile-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker images
      run: |
        docker build -t anga-backend:latest ./backend
        docker build -t anga-mobile:latest ./mobile
        
    - name: Test Docker Compose
      run: |
        docker-compose -f docker-compose.yml config
        docker-compose -f docker-compose.yml build
        
    - name: Run Docker containers
      run: |
        docker-compose -f docker-compose.yml up -d
        sleep 30
        curl -f http://localhost:8000/health || exit 1
        docker-compose -f docker-compose.yml down

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest-asyncio httpx
        
    - name: Run integration tests
      run: |
        cd backend
        pytest tests/integration/ -v
        
    - name: Test API endpoints
      run: |
        cd backend
        python -m pytest tests/test_api.py -v

  # Performance Testing
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install performance testing tools
      run: |
        pip install locust pytest-benchmark
        
    - name: Run performance benchmarks
      run: |
        cd backend
        python -m pytest tests/test_performance.py --benchmark-only
        
    - name: Run load testing
      run: |
        cd backend
        locust -f tests/load_test.py --headless -u 10 -r 1 --run-time 30s

  # Documentation Build
  docs-build:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install documentation tools
      run: |
        pip install mkdocs mkdocs-material pymdown-extensions
        
    - name: Build documentation
      run: |
        mkdocs build --strict
        
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: site/
        retention-days: 30

  # Final Status Check
  status-check:
    name: Status Check
    runs-on: ubuntu-latest
    needs: [backend-test, mobile-test, security-scan, docker-build, integration-test, performance-test, docs-build]
    
    steps:
    - name: Check all jobs completed
      run: |
        echo "All CI/CD jobs completed successfully!"
        echo "âœ… Backend tests passed"
        echo "âœ… Mobile app tests passed"
        echo "âœ… Security scan completed"
        echo "âœ… Docker build successful"
        echo "âœ… Integration tests passed"
        echo "âœ… Performance tests completed"
        echo "âœ… Documentation built"
        
    - name: Create deployment summary
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "ðŸš€ Ready for production deployment!"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Author: ${{ github.actor }}"
