[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "anga-weather-app"
version = "1.0.0"
description = "ANGA Weather App - AI-powered weather forecasting and farming assistance"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "ANGA Development Team", email = "dev@anga-weather.com"}
]
maintainers = [
    {name = "ANGA Development Team", email = "dev@anga-weather.com"}
]
keywords = ["weather", "ai", "farming", "flutter", "fastapi", "machine-learning"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: User Interfaces",
    "Topic :: System :: Monitoring",
]
requires-python = ">=3.8"
dependencies = [
    "fastapi>=0.115.0",
    "uvicorn>=0.34.0",
    "pydantic>=2.10.0",
    "sqlalchemy>=2.0.0",
    "requests>=2.32.0",
    "numpy>=2.2.0",
    "pandas>=2.2.0",
    "groq>=0.28.0",
    "python-dotenv>=1.0.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "redis>=5.0.0",
    "psycopg2-binary>=2.9.0",
    "alembic>=1.12.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.12.0",
    "black>=24.0.0",
    "flake8>=7.0.0",
    "mypy>=1.10.0",
    "isort>=5.13.0",
    "pre-commit>=3.6.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
]
test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.26.0",
    "factory-boy>=3.3.0",
    "faker>=22.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.25.0",
    "pymdown-extensions>=10.8",
]
ml = [
    "scikit-learn>=1.4.0",
    "prophet>=1.1.0",
    "matplotlib>=3.10.0",
    "plotly>=6.0.0",
    "seaborn>=0.13.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.29.0",
]

[project.urls]
Homepage = "https://github.com/anga-weather/anga-weather-app"
Documentation = "https://anga-weather.com/docs"
Repository = "https://github.com/anga-weather/anga-weather-app.git"
"Bug Tracker" = "https://github.com/anga-weather/anga-weather-app/issues"
"Source Code" = "https://github.com/anga-weather/anga-weather-app"
"Release Notes" = "https://github.com/anga-weather/anga-weather-app/releases"

[project.scripts]
anga-backend = "anga.backend.main:main"
anga-cli = "anga.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["anga*"]
exclude = ["tests*", "docs*", "scripts*"]

[tool.setuptools.package-data]
"anga" = ["py.typed", "*.pyi", "**/*.pyi"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Flake8 configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
    ".eggs",
    "*.egg",
    ".mypy_cache",
    ".pytest_cache",
    ".tox",
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101,S105,S106,S107",
]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "fastapi.*",
    "uvicorn.*",
    "sqlalchemy.*",
    "redis.*",
    "psycopg2.*",
    "groq.*",
    "prophet.*",
    "sklearn.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=anga",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "performance: marks tests as performance tests",
    "security: marks tests as security tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["anga"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/\.venv/*",
    "*/build/*",
    "*/dist/*",
    "*/\.eggs/*",
    "*/\.mypy_cache/*",
    "*/\.pytest_cache/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
known_first_party = ["anga"]
known_third_party = ["fastapi", "uvicorn", "pydantic", "sqlalchemy"]

# Pre-commit configuration
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.5.0",
        hooks = [
            {id = "trailing-whitespace"},
            {id = "end-of-file-fixer"},
            {id = "check-yaml"},
            {id = "check-added-large-files"},
            {id = "check-merge-conflict"},
            {id = "check-case-conflict"},
            {id = "check-docstring-first"},
        ],
    },
    {
        repo = "https://github.com/psf/black",
        rev = "24.1.1",
        hooks = [{id = "black", language_version = "python3"}],
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.13.2",
        hooks = [{id = "isort"}],
    },
    {
        repo = "https://github.com/pycqa/flake8",
        rev = "7.0.0",
        hooks = [{id = "flake8"}],
    },
    {
        repo = "https://github.com/pre-commit/mirrors-mypy",
        rev = "v1.8.0",
        hooks = [
            {
                id = "mypy",
                additional_dependencies = ["types-requests", "types-PyYAML"],
            },
        ],
    },
]

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "build", "dist"]
skips = ["B101", "B601"]

# Safety configuration
[tool.safety]
output = "json"
save = "safety-report.json"
